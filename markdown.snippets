###############
##Python Util##
###############
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
		
def nomath():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first == ignore
	except StopIteration:
		return True


def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip()
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])
	prefix_str = "from vimsnippets import display_width;"
	# erase current line
	snip.buffer[snip.line] = ""
	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = "| "
	anon_snippet_delimiter = "|"
	for col in range(1, columns_amount+1):
		sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
		sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
		max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
		cur_width_str = "display_width(t[" + str(col) + "])"
		rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
		anon_snippet_title += "${" + str(col)  + ":head" + str(col)\
			+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		anon_snippet_delimiter += ":`!p " + prefix_str + "snip.rv = "\
			+ max_width_str + "*'-'" + "`-|"
	anon_snippet_title += "\n"
	anon_snippet_delimiter += "\n"
	anon_snippet_body = ""
	for row in range(1, rows_amount+1):
		body_row = "| "
		for col in range(1, columns_amount+1):
			sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
			sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
			max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
			cur_width_str = "display_width(t[" + str(row*columns_amount+col) + "])"
			rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
			placeholder = "R{0}C{1}".format(row, col)
			body_row += "${" + str(row*columns_amount+col)  + ":" + placeholder\
				+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		body_row += "\n"
		anon_snippet_body += body_row
	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body
	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)

endglobal
#########
#  hexo #
#########
snippet more "excerpt" b
<!-- more -->
$0
endsnippet

snippet cq "quote" b
{% cq %}
{% endcq %}
endsnippet

snippet gp "grouppicture" b
{% grouppicture $1 %}

{% endgrouppicture %}
endsnippet

snippet > "quote" A
> $0  
endsnippet


snippet \al "alert" 
<span style="color:${1:#B95000}"> $2 </span>
endsnippet

snippet '```' "code" b
```

```
endsnippet

snippet tab "add tab" b
{% tabs {$1:name} %}
<!-- tab $2 -->
$0
<!-- endtab -->
{% endtabs %}
endsnippet

snippet '<[a-z]+[0â€“9]*' "Generic HTML tag builder multi-line" r
<`!p snip.rv = match.group()[1:]`$1> $0 </`!p snip.rv = match.group()[1:]`>
endsnippet


snippet kbd "HTML kbd tag"
<kbd>$1</kbd>
endsnippet

snippet block "note" b
{% note info %}
#### 

{% endnote %}
endsnippet 
#############
### Math ####
#############
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet


snippet dm "Math" wA
$$
${1:${VISUAL}}
$$ $0
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet >= "geq" Ai
\geq
endsnippet

context "math()"
snippet <= "leq" Ai
\implies
endsnippet


context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet ali "Align" bA
\begin{aligned}
	${1:${VISUAL}}
\end{aligned}
endsnippet

context "math()"
snippet // "Fraction" iA	
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet == "equals"
&= $1 \\\\
endsnippet

context "math()"
snippet sr "^2" 
^2
endsnippet

context "math()"
snippet cb "^3" 
^3
endsnippet

context "math()"
snippet td "to the ... power"  Ai
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" 
^{$1}$0
endsnippet

context "math()"
snippet __ "subscript" Ai
_{$1}$0
endsnippet

priority 100
context "math()"
snippet ^^ "upper" Ai
^{$1}$0
endsnippet

context "math()"
snippet ooo "\infty" 
\infty
endsnippet

context "math()"
snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet <= "leq" 
\le 
endsnippet

context "math()"
snippet >= "geq" 
\ge 
endsnippet

context "math()"
snippet EE "geq" 
\exists 
endsnippet

context "math()"
snippet AA "forall" 
\forall 
endsnippet

context "math()"
snippet xnn "xn" 
x_{n}
endsnippet

context "math()"
snippet ynn "yn" 
y_{n}
endsnippet


context "math()"
snippet xii "xi" 
x_{i}
endsnippet

context "math()"
snippet yii "yi" 
y_{i}
endsnippet

context "math()"
snippet xjj "xj" 
x_{j}
endsnippet

context "math()"
snippet yjj "yj" 
y_{j}
endsnippet

context "math()"
snippet xp1 "x" 
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" 
x_{m}
endsnippet


context "math()"
snippet mcal "mathcal" A
\mathcal{$1}$0
endsnippet

snippet lll "l"
\ell
endsnippet

context "math()"
snippet nab "nabla" 
\nabla 
endsnippet

context "math()"
snippet xx "cross" 
\times 
endsnippet

context "math()"
snippet norm "norm"
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(cdot|sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" 
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" 
\mapsto 
endsnippet


context "math()"
snippet compl "complement" 
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" 
\setminus
endsnippet

context "math()"
snippet >> ">>" w
\gg
endsnippet

context "math()"
snippet << "<<" w
\ll
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet || "mid" 
 \mid 
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " 
\not\in 
endsnippet

context "math()"
snippet inn "in " 
\in 
endsnippet

context "math()"
snippet NN "n" 
\N
endsnippet

context "math()"
snippet Nn "cap" 
\cap 
endsnippet

context "math()"
snippet UU "cup" 
\cup 
endsnippet

context "math()"
snippet uuu "bigcup" 
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" 
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" 
\O
endsnippet

context "math()"
snippet RR "real" 
\R
endsnippet

context "math()"
snippet QQ "Q" 
\Q
endsnippet

context "math()"
snippet ZZ "Z" 
\Z
endsnippet

context "math()"
snippet <! "normal" 
\trngleleft 
endsnippet

context "math()"
snippet <> "hokje" 
\dmond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" 
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet SI "SI" 
\SI{$1}{$2}
endsnippet

snippet cvec "column vector" 
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" r
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" r
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" r
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" r
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet HH "H" 
\mathbb{H}
endsnippet

context "math()"
snippet DD "D" 
\mathbb{D}
endsnippet

context "math()"
snippet != "unequals" 
\neq 
endsnippet

context "math()"
snippet ceil "ceil" 
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" 
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" 
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "bmat" 
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" 
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet {} "left{ right}" 
\left\\{ 
${1:${VISUAL}}
\right.
endsnippet

snippet lra "leftangle rightangle" 
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" 
\overline{$1}$0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context "math()"
snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partl ${1:V}}{\partl ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" 
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet ~ "~"
\sim 
endsnippet

context "math()"
snippet ~~ "approx"
\approx
endsnippet

context "math()"
snippet != "nq" 
\neq
endsnippet

context "math()"
snippet +- "pm" wA
\pm
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(alpha|beta|gamma|delta|Delta|epsilon|varepsilon|zeta|eta|theta|Theta|vartheta|mu|nu|xi|pi|rho|sigma|tau|phi|Phi|varphi|omega|Omega|chi)' "greece" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet '(?<!\\)(vec)' "latexmath" rwA
\\`!p snip.rv = match.group(1)`{$0}
endsnippet


##############
## Markdown ##
##############
snippet title "title"
<head><style>div.solid {border-style:solid;}</style></head>
<b><font size="7">$1</font></b>

------

$0
endsnippet

snippet newpage "New Page"
<div style="page-break-after: always;"></div>
$0
endsnippet

snippet sp
&emsp;
endsnippet

snippet  ini "init" bw
%%{init: {'theme':'base'}}%%
%% forest, dark, neutral
endsnippet


snippet 4sp "4 space" w
&emsp; &emsp; &emsp; &emsp;
endsnippet

snippet deg "degree" w
&deg;$C$
endsnippet

snippet dia "diamond" w
&diams;
endsnippet

snippet club "spade"
$\clubsuit$
endsnippet

snippet link  "hlink" w
[$1]($2)$0 
endsnippet

snippet fig "Figure environment" bw
<img src="$1" width="50%" height="50%"> <center>$2</center>
$0
endsnippet


post_jump "create_table(snip)"
snippet "([1-9][1-9])tb" "Fancy table" br
`!p snip.rv = match.group(1)`
endsnippet




# vim:ft=snippets
