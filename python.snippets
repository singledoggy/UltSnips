snippet ipdb "ipdb" bA
import ipdb; ipdb.set_trace()
endsnippet
snippet	warning "warning" bA
import warnings
warnings.filterwarnings('ignore')
endsnippet

snippet ini "pd" b
import numpy as np
import pandas as pd
import xarray as xr
from dask.distributed import Client
client = Client(n_workers=16, threads_per_worker=1, memory_limit="8GB")
client
endsnippet

snippet picklesave "picklesave" b
import pickle
pickle_list = [$1]
# Saving the objects:
with open('./data/$2.pkl', 'wb') as f:
    pickle.dump(pickle_list, f)
endsnippet

snippet pickleload "picklesave" b
import pickle
# Getting back the objects:
with open('./data/$1', 'rb') as f:
    $2 = pickle.load(f)
endsnippet

snippet dillsave "dillsave" b
import dill
dill.dump_session("./data/`!p snip.rv = snip.basename`.pkl")
endsnippet

snippet dillload "dillload" b
import dill
dill.load_session("./data/`!p snip.rv = snip.basename`.pkl")
endsnippet


snippet fig "fig" b
import proplot as pplt
import matplotlib.pyplot as plt
# plt.rcParams['axes.unicode_minus'] = False
# plt.rcParams["mathtext.default"]='regular'
# plt.rcParams['font.sans-serif']=['Songti SC']
fig, axs = pplt.subplots(ncols=1, nrows=1, # figwidth=5,
                         journal='nat2', )
axs.format(
    suptitle='', xlabel='xlabel', ylabel='ylabel', abc=True,
)
endsnippet

snippet geofig "geofig" b
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
# from cnmaps import draw_map, get_adm_maps
# china_map = get_adm_maps(level="ÁúÅ", engine="geopandas")
# plt.rcParams['axes.unicode_minus'] = False
# plt.rcParams["mathtext.default"]='regular'
# plt.rcParams['font.sans-serif']=['Songti SC']
fig, axs = plt.subplots(ncols=1, nrows=1, subplot_kw={"projection": crs})

$1

# china_map.plot(ax=axs, edgecolor="black", facecolor="none", transform=crs, linewidth=0.5)
gl = axs.gridlines(
    draw_labels=True,
    x_inline=False,
    y_inline=False,
    color="k",
    linestyle="dotted",
    zorder=4,
    transform=crs,
)
gl.top_labels = gl.right_labels = False
gl.rotate_labels = False

endsnippet


snippet gpplt "gpplt" b
import proplot as pplt
import matplotlib.pyplot as plt
pplt.rc['reso'] = 'lo'  # 'lo', 'med', 'hi', 'x-hi', or 'xx-hi'
# plt.rcParams['axes.unicode_minus'] = False
# plt.rcParams["mathtext.default"]='regular'
# plt.rcParams['font.sans-serif']=['Songti SC']
fig, axs = pplt.subplots(ncols=1, nrows=1, proj=proj, # figwidth=5,
                         journal='nat2', )
endsnippet

snippet latlon "lat lon grid set" b
gl = ax.gridlines(draw_labels=True,
                  x_inline=False, y_inline=False,
                  color='k', linestyle='dotted', zorder=4)
gl.top_labels = gl.right_labels = False
gl.rotate_labels = False
endsnippet

snippet np.savetxt "numpy" iA
np.savetxt('./data/$1.csv',a, delimiter=",",fmt='%.2f')
endsnippet

snippet .to_csv "pandas" iA
.to_csv('./data/$1.csv',sep=',', float_format='%.2f')
endsnippet

snippet xr.open_dataset "dataset" i
xr.open_dataset(
    '$1',
    decode_coords="all"
)
endsnippet

snippet plt.savefig "expand" b
plt.savefig('./figure/$1',
            dpi=300, bbox_inches='tight')
endsnippet

snippet fig.save "expand" b
fig.save('./figure/.pdf')
endsnippet

snippet xr.open_mfdataset "expand" i
xr.open_mfdataset(paths, 
    concat_dim="Time",
    combine="nested",
    chunks={"Time": 24},
    decode_times=False,
	)
endsnippet

snippet xr.save_mfdataset "expand" i
xr.save_mfdataset(datasets=datasets, paths=paths)
endsnippet
